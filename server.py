from db import Db
from typing import List
from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib.parse import urlparse
import json

# –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User:
    def __init__(self, username, balance=0):
        self.username = username
        self.balance = balance

users: Db = Db(db_name="users", db_user="sofia", db_password="nigga")

class SimpleHandler(BaseHTTPRequestHandler):

    # –ú–µ—Ç–æ–¥ POST ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def do_POST(self):
        content_length = int(self.headers.get('Content-Length', 0))
        post_body = self.rfile.read(content_length)

        try:
            data = json.loads(post_body.decode())  # –ß–∏—Ç–∞–µ–º JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            name = data.get("name")
            balance = data.get("balance", 0)

            if not name:
                raise ValueError("–ü–æ–ª–µ 'name' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")

            users.insert_user(name, balance)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                                 # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫

            response = {
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω",
                "user": {
                    "name": name,
                    "balance": balance
                }
            }

            self.send_response(200)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps(response).encode())

        except Exception as e:
            self.send_response(400)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps({"error": str(e)}).encode())

    # –ú–µ—Ç–æ–¥ GET ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏ –±–∞–ª–∞–Ω—Å—É
    def do_GET(self):
        parsed_url = urlparse(self.path)
        path_parts = parsed_url.path.strip("/").split("/")

        username = path_parts[0] if len(path_parts) > 0 else None


        if not username:
            self.send_response(400)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps({"error": "Username is missing"}).encode())
            return

        user = users.get_user(username)
        if user:
            self.send_response(200)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps(user).encode())
        else:

            self.send_response(404)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}).encode())

    # üî• –ú–µ—Ç–æ–¥ DELETE ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
    def do_DELETE(self):
        parsed_url = urlparse(self.path)
        path_parts = parsed_url.path.strip("/").split("/")

        if len(path_parts) != 1:
            self.send_response(400)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps({"error": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /username"}).encode())
            return

        username = path_parts[0]
        global users

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = users.delete_user(username)
        if user:
            self.send_response(200)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps({"message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª–µ–Ω"}).encode())
        else:

            self.send_response(404)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}).encode())

    def add_product(self, product_name, price):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        if not product_name or price < 0:
            self.send_response(400)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps({"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞"}).encode())
            return

        users.add_product(product_name, price)
        self.send_response(202)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(json.dumps({"message": f"–ü—Ä–æ–¥—É–∫—Ç {product_name} –¥–æ–±–∞–≤–ª–µ–Ω"}).encode())

    def buy_product(self, username, product_name):
        """–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        if not username or not product_name:
            self.send_response(400)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps({"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"}).encode())
            return

        user = users.get_user(username)
        if not user:
            self.send_response(404)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}).encode())
            return

        # –õ–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        # ...

        self.send_response(200)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(json.dumps({"message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∫—É–ø–∏–ª –ø—Ä–æ–¥—É–∫—Ç {product_name}"}).encode())

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server = HTTPServer(("localhost", 8000), SimpleHandler)
print("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:8000/")
server.serve_forever()